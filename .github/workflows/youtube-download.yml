name: Record YouTube Video and Release

on:
  workflow_dispatch:
    inputs:
      youtube_url:
        description: "URL del video de YouTube a grabar"
        required: true
        type: string

jobs:
  record-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Crear Dockerfile para entorno de grabación privilegiado
        run: |
          cat <<'EOF' > Dockerfile
          FROM node:18-slim
          # Instalar dependencias necesarias
          RUN apt-get update && apt-get install -y \
              wget \
              gnupg \
              xvfb \
              ffmpeg \
              pulseaudio \
              fonts-liberation \
              libasound2 \
              libatk-bridge2.0-0 \
              libnspr4 \
              libnss3 \
              libx11-xcb1 \
              libxcomposite1 \
              libxdamage1 \
              libxrandr2 \
              libgbm1 \
              --no-install-recommends && rm -rf /var/lib/apt/lists/*
          # Instalar Google Chrome stable
          RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          RUN apt install -y ./google-chrome-stable_current_amd64.deb
          # Instalar las librerías de Node necesarias (incluyendo puppeteer-stream y plugins)
          RUN npm install -g puppeteer puppeteer-stream puppeteer-extra puppeteer-extra-plugin-stealth
          WORKDIR /app
          # El script de grabación se copiará (o se monta) en /app/record.js
          CMD ["node", "record.js"]
          EOF

      - name: Construir imagen Docker
        run: docker build -t recorder:latest .

      - name: Crear script de grabación (record.js)
        run: |
          cat <<'EOF' > record.js
          const puppeteerStream = require('puppeteer-stream');
          const puppeteer = require('puppeteer-extra');
          const stealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');
          puppeteer.use(stealthPlugin());
          
          (async () => {
            // Usamos el método launch de puppeteer-stream según la documentación
            const browser = await puppeteerStream.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--enable-usermedia-screen_capturing',
                '--allow-http-screen-capture',
                '--use-fake-ui-for-media-stream',
                '--use-fake-device-for-media-stream',
                '--autoplay-policy=no-user-gesture-required'
              ],
              defaultViewport: { width: 1280, height: 720 },
              executablePath: '/usr/bin/google-chrome-stable'
            });
            const page = await browser.newPage();
            console.log("Navegando a YouTube...");
            await page.goto(process.env.YOUTUBE_URL, { waitUntil: 'networkidle2' });
            console.log("Esperando que cargue el elemento <video>...");
            await page.waitForSelector('video', { timeout: 60000 });
            console.log("Reproduciendo video...");
            await page.evaluate(() => {
              const video = document.querySelector('video');
              video.play();
              video.volume = 1.0;
            });
            console.log("Esperando que el video empiece a reproducirse...");
            await page.waitForFunction(() => {
              const video = document.querySelector('video');
              return video && !video.paused && video.currentTime > 0;
            }, { timeout: 60000 });
            console.log("Iniciando grabación...");
            // Inicia la captura del stream (audio y video)
            const stream = await puppeteerStream.start(page, { audio: true, video: true });
            const out = fs.createWriteStream('video.webm');
            stream.pipe(out);
            // Graba durante 60 segundos
            await new Promise(resolve => setTimeout(resolve, 60000));
            console.log("Finalizando grabación...");
            stream.destroy();
            await browser.close();
          })().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOF

      - name: Ejecutar contenedor de grabación en modo privileged
        env:
          YOUTUBE_URL: ${{ inputs.youtube_url }}
        run: |
          # Ejecutamos el contenedor con --privileged y montamos el directorio actual para recoger el video
          docker run --rm --privileged -v "$(pwd):/app" -e YOUTUBE_URL="$YOUTUBE_URL" recorder:latest

      - name: Convertir video a MP4 con FFmpeg
        run: |
          ffmpeg -i video.webm -vf "scale=1280:720:flags=lanczos" -c:v libx264 -preset slow -crf 18 -c:a aac -b:a 192k video_final.mp4

      - name: Crear release y subir video a GitHub
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_NAME=$(date +"%Y-%m-%d")
          gh release create "$RELEASE_NAME" "video_final.mp4" --title "Video grabado el $RELEASE_NAME" --notes "Grabación automática desde YouTube usando un contenedor privilegiado"
