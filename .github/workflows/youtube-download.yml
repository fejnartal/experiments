name: Record YouTube Video and Release

on:
  workflow_dispatch:
    inputs:
      youtube_url:
        description: "URL del video de YouTube a grabar"
        required: true
        type: string

jobs:
  record-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Instalar dependencias del sistema y Node
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg xvfb wget
          # Instalar Google Chrome stable (usamos el paquete .deb)
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
          rm google-chrome-stable_current_amd64.deb
          # Inicializamos un proyecto Node y instalamos Puppeteer
          npm init -y
          npm install puppeteer

      - name: Crear script de grabación (record.js)
        run: |
          cat <<'EOF' > record.js
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          
          (async () => {
            // Lanzamos Chrome en modo no headless sobre Xvfb y con flags para capturar pantalla sin diálogo
            const browser = await puppeteer.launch({
              headless: false,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--use-fake-ui-for-media-stream',
                '--auto-select-desktop-capture-source=Entire screen',
                '--window-size=1280,720'
              ],
              defaultViewport: { width: 1280, height: 720 },
              executablePath: '/usr/bin/google-chrome-stable'
            });
            const page = await browser.newPage();
            console.log("Navegando a YouTube...");
            await page.goto(process.env.YOUTUBE_URL, { waitUntil: 'networkidle2' });
            // Esperamos a que se cargue algún elemento <video>
            console.log("Esperando que aparezca el elemento <video>...");
            await page.waitForSelector('video', { timeout: 60000 });
            // Inyectamos código para usar getDisplayMedia y MediaRecorder
            const recordedBase64 = await page.evaluate(async () => {
              // Solicita captura de pantalla (del propio navegador) usando getDisplayMedia
              const stream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });
              const options = { mimeType: 'video/webm;codecs=vp9,opus' };
              const mediaRecorder = new MediaRecorder(stream, options);
              const chunks = [];
              mediaRecorder.ondataavailable = event => {
                if (event.data && event.data.size > 0) {
                  chunks.push(event.data);
                }
              };
              mediaRecorder.start();
              // Graba durante 60 segundos
              await new Promise(resolve => setTimeout(resolve, 60000));
              await new Promise(resolve => {
                mediaRecorder.onstop = resolve;
                mediaRecorder.stop();
              });
              const blob = new Blob(chunks, { type: 'video/webm' });
              // Convierte el blob a base64
              return await new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                  // reader.result es "data:<mime>;base64,...", separamos la parte base64
                  resolve(reader.result.split(',')[1]);
                };
                reader.onerror = reject;
                reader.readAsDataURL(blob);
              });
            });
            // Escribimos el archivo en disco
            fs.writeFileSync('video.webm', Buffer.from(recordedBase64, 'base64'));
            console.log("Grabación completada: video.webm creado");
            await browser.close();
          })().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOF

      - name: Iniciar Xvfb
        run: |
          # Iniciamos Xvfb para proporcionar entorno gráfico (puerto :99)
          Xvfb :99 -screen 0 1280x720x24 -ac &
          # Establecemos la variable DISPLAY para que Chrome la use
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Ejecutar el script de grabación
        env:
          YOUTUBE_URL: ${{ inputs.youtube_url }}
        run: node record.js

      - name: Convertir video a MP4 con FFmpeg
        run: |
          ffmpeg -i video.webm -vf "scale=1280:720:flags=lanczos" -c:v libx264 -preset slow -crf 18 -c:a aac -b:a 192k video_final.mp4

      - name: Crear release y subir video
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_NAME=$(date +"%Y-%m-%d")
          gh release create "$RELEASE_NAME" "video_final.mp4" --title "Video grabado el $RELEASE_NAME" --notes "Video descargado (grabado vía getDisplayMedia/MediaRecorder) desde YouTube"
