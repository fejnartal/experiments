name: Record YouTube Video and Release

on:
  workflow_dispatch:
    inputs:
      youtube_url:
        description: "URL del video de YouTube"
        required: true
        type: string

jobs:
  record-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Instalar dependencias (Puppeteer y FFmpeg)
        run: |
          apt-get update && apt-get install -y ffmpeg pulseaudio xvfb
          npm install puppeteer puppeteer-extra puppeteer-extra-plugin-stealth

      - name: Iniciar servidor X virtual (Xvfb)
        run: |
          Xvfb :99 -screen 0 1280x720x24 -ac &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Grabar video desde YouTube
        env:
          YOUTUBE_URL: ${{ inputs.youtube_url }}
        run: |
          cat <<EOF > record.js
          const puppeteer = require('puppeteer-extra');
          const stealthPlugin = require('puppeteer-extra-plugin-stealth');
          puppeteer.use(stealthPlugin());

          const { exec } = require('child_process');

          (async () => {
              const browser = await puppeteer.launch({
                  headless: false, 
                  args: [
                      '--no-sandbox',
                      '--disable-setuid-sandbox',
                      '--window-size=1280,720',
                      '--autoplay-policy=no-user-gesture-required',
                      '--enable-usermedia-screen-capturing',
                      '--allow-http-screen-capture',
                      '--disable-infobars',
                      '--disable-background-timer-throttling',
                      '--disable-backgrounding-occluded-windows',
                      '--disable-renderer-backgrounding',
                      '--force-color-profile=srgb',
                      '--disable-features=PreloadMediaEngagementData,AutoplayIgnoreWebAudio,MediaEngagementBypassAutoplayPolicies',
                      '--use-fake-ui-for-media-stream',
                      '--use-fake-device-for-media-stream',
                      '--enable-logging', '--v=1'
                  ],
                  defaultViewport: null,
                  executablePath: '/usr/bin/google-chrome'
              });

              const page = await browser.newPage();
              console.log("Cargando YouTube...");
              await page.goto(process.env.YOUTUBE_URL, { waitUntil: 'networkidle2' });

              console.log("Esperando a que el video cargue...");
              await page.waitForSelector("video", { timeout: 60000 });

              // Asegurar que el video está en máxima calidad y reproducirlo
              await page.evaluate(() => {
                  let video = document.querySelector("video");
                  video.play();
                  video.volume = 1.0;
              });

              // Esperamos a que el video comience a reproducirse (no solo cargarse)
              console.log("Esperando a que el video empiece a reproducirse...");
              await page.waitForFunction(() => {
                  const video = document.querySelector('video');
                  return video && !video.paused && video.currentTime > 0;
              }, { timeout: 60000 });

              console.log("Iniciando grabación con FFmpeg...");
              const ffmpegCommand = 'ffmpeg -y -f x11grab -r 30 -s 1280x720 -i :99.0 -f pulse -ac 2 -i default -c:v libx264 -preset ultrafast -crf 18 -c:a aac -b:a 192k video.mp4';
              const recording = exec(ffmpegCommand);

              // Usamos waitFor para esperar un tiempo específico (60s)
              console.log("Grabando durante 60 segundos...");
              await page.waitFor(() => new Promise(resolve => setTimeout(resolve, 60000))); // Esperar 60s

              console.log("Finalizando grabación...");
              recording.kill();

              await browser.close();
          })();
          EOF

          node record.js

      - name: Mejorar calidad con FFmpeg
        run: |
          ffmpeg -i video.mp4 -vf "scale=1280:720:flags=lanczos" -c:v libx264 -preset slow -crf 18 -c:a aac -b:a 192k video_final.mp4

      - name: Subir video como release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_NAME=$(date +"%Y-%m-%d")
          gh release create "$RELEASE_NAME" "video_final.mp4" --title "Video grabado el $RELEASE_NAME" --notes "Grabación automática desde YouTube"
