name: Record YouTube Video

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: "YouTube Video URL"
        required: true
        type: string

jobs:
  record:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install puppeteer puppeteer-extra puppeteer-extra-plugin-stealth fs-extra

      - name: Create Puppeteer Script
        run: |
          $script = @"
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs-extra');

          puppeteer.use(StealthPlugin());

          (async () => {
              const browser = await puppeteer.launch({
                  executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
                  headless: false,
                  args: [
                      '--no-sandbox',
                      '--disable-setuid-sandbox',
                      '--use-fake-ui-for-media-stream',
                      '--use-fake-device-for-media-stream',
                      '--enable-usermedia-screen-capturing',
                      '--disable-web-security',
                      '--autoplay-policy=no-user-gesture-required'
                  ]
              });

              const page = await browser.newPage();
              await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0');
              await page.setViewport({ width: 1280, height: 720 });

              const url = process.env.TARGET_URL;
              console.log("Navigating to YouTube login...");

              await page.goto('https://accounts.google.com/signin', { waitUntil: 'networkidle2' });

              // Enter email and press Enter
              await page.waitForSelector('input[type="email"]', { timeout: 10000 });
              await page.type('input[type="email"]', process.env.YT_EMAIL, { delay: 50 });
              await page.keyboard.press('Enter');

              // Wait for password field
              await page.waitForSelector('input[type="password"]', { timeout: 10000 });
              await page.type('input[type="password"]', process.env.YT_PASSWORD, { delay: 50 });

              // Try pressing Enter instead of clicking #passwordNext
              await page.keyboard.press('Enter');

              // Wait until logged in
              await page.waitForNavigation({ waitUntil: 'networkidle2' });

              console.log("Logged into YouTube. Navigating to video...");

              await page.goto(url, { waitUntil: 'networkidle2' });

              // Accept cookies if prompted
              try {
                  await page.waitForSelector('[aria-label="Accept Cookies"], button:contains("Accept")', { timeout: 5000 });
                  await page.click('[aria-label="Accept Cookies"], button:contains("Accept")');
              } catch (err) {
                  console.log('No cookie popup found.');
              }

              console.log('Waiting for video to load...');
              await page.waitForSelector('video');

              await page.evaluate(() => {
                  document.querySelector('video').play();
              });

              console.log('Video found! Injecting recording script...');

              await page.evaluate(() => {
                  window.startRecording = () => {
                      return new Promise((resolve) => {
                          const video = document.querySelector('video');
                          if (!video) {
                              console.error('No video found.');
                              return;
                          }

                          const stream = video.captureStream();
                          const recorder = new MediaRecorder(stream, { mimeType: 'video/webm; codecs=vp9,opus' });

                          const chunks = [];
                          recorder.ondataavailable = event => chunks.push(event.data);
                          recorder.onstop = () => {
                              const blob = new Blob(chunks, { type: 'video/webm' });
                              const reader = new FileReader();
                              reader.onload = () => resolve(reader.result);
                              reader.readAsArrayBuffer(blob);
                          };

                          recorder.start();
                          setTimeout(() => recorder.stop(), 20000);
                      });
                  };
              });

              const videoBuffer = await page.evaluate(() => window.startRecording());

              if (!videoBuffer) {
                  console.error('Recording failed.');
                  await browser.close();
                  process.exit(1);
              }

              console.log('Recording finished. Saving file...');
              fs.writeFileSync('recording.webm', Buffer.from(videoBuffer));
              console.log('Recording saved: recording.webm');

              await browser.close();
          })();
          "@
          $script | Set-Content -Path record.js -Encoding utf8
        shell: pwsh

      - name: Run Puppeteer & Record YouTube Video
        run: node record.js
        env:
          TARGET_URL: ${{ inputs.target_url }}
          YT_EMAIL: ${{ secrets.YT_EMAIL }}
          YT_PASSWORD: ${{ secrets.YT_PASSWORD }}

      - name: Upload Recording to GitHub Releases
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          files: recording.webm
          tag_name: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
