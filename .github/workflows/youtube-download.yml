name: Download YouTube Video

on:
  workflow_dispatch:
    inputs:
      youtube_url:
        description: 'URL of the YouTube video to download'
        required: true

jobs:
  download_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          echo "Starting dependency installation..."
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable xvfb pulseaudio
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get install -fy
          npm install puppeteer puppeteer-stream xvfb
          echo "Dependencies installed successfully."

      - name: Download YouTube video
        run: |
          echo "Creating download_video.js script..."
          cat << 'EOF' > download_video.js
          const fs = require('fs');
          const { executablePath } = require('puppeteer');
          const { launch, getStream } = require('puppeteer-stream');
          const Xvfb = require('xvfb');

          const downloadVideo = async (url) => {
            console.log("Starting Xvfb...");
            const xvfb = new Xvfb({
              silent: true,
              xvfb_args: ['-screen', '0', '1920x1080x30', '-ac'],
            });
            xvfb.start();

            console.log("Launching Puppeteer...");
            const browser = await launch({
              executablePath: executablePath(),
              defaultViewport: null,
              headless: false,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--start-fullscreen',
                '--use-fake-ui-for-media-stream',
                '--use-fake-device-for-media-stream',
                '--enable-usermedia-screen-capturing',
                '--allow-http-screen-capture',
                '--autoplay-policy=no-user-gesture-required'
              ],
            });
            console.log("Puppeteer launched successfully.");

            const page = await browser.newPage();
            await page.goto('https://accounts.google.com/signin');
            console.log("Logging into YouTube...");
            await page.type("input[type='email']", process.env.YT_EMAIL);
            await page.click("#identifierNext");

            // Wait for the password input to appear
            await page.waitForSelector("input[type='password']");

            await page.type("input[type='password']", process.env.YT_PASSWORD);
            await page.keyboard.press('Enter');

            // Wait for the YouTube video player to be ready
            // await page.waitForSelector(".ytp-play-button");
            console.log("Login successful.");

            console.log("Navigating to YouTube video: " + url);
            await page.goto(url);

            // Wait for the video element to appear
            await page.waitForSelector("video");

            // Hide everything except the video element
            await page.evaluate(() => {
              const elementsToHide = document.body.children;
              Array.from(elementsToHide).forEach(element => {
                if (element.tagName.toLowerCase() !== 'video') {
                  element.style.display = 'none';
                }
              });

              // Optionally, set the video element to fullscreen and make it take the full screen size
              const video = document.querySelector("video");
              if (video) {
                video.style.position = 'absolute';
                video.style.top = '0';
                video.style.left = '0';
                video.style.width = '100vw'; // Full screen width
                video.style.height = '100vh'; // Full screen height
                video.play();
                video.requestFullscreen();
                video.playbackQuality = 'hd1080'; // Ensure 1080p if possible
              }
            });

            console.log("Starting video and audio stream...");
            const stream = await getStream(page, { video: true, audio: true });
            const file = fs.createWriteStream('./downloaded_video.mp4');
            stream.pipe(file);

            // Wait for the video to end
            await page.evaluate(() => {
              return new Promise((resolve) => {
                const video = document.querySelector("video");
                video.addEventListener("ended", resolve);
              });
            });
            console.log("Video playback finished.");

            stream.destroy();
            file.on('finish', async () => {
              console.log("File stream closed.");
              await browser.close();
              console.log("Browser closed.");
              xvfb.stop();
              console.log("Xvfb stopped.");
              process.exit(0);
            });
            file.close();
          };

          const url = process.argv[2];
          if (!url) {
            console.error('Please provide a YouTube URL as an argument.');
            process.exit(1);
          }

          console.log("Starting download process...");
          downloadVideo(url).catch(err => {
            console.error("Error during video download:", err);
            process.exit(1);
          });
          EOF
          echo "download_video.js script created."
          echo "Executing script..."
          node download_video.js "${{ github.event.inputs.youtube_url }}"
        env:
          DISPLAY: ':99'
          YT_EMAIL: ${{ secrets.YT_EMAIL }}
          YT_PASSWORD: ${{ secrets.YT_PASSWORD }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: 'youtube-video-${{ github.run_id }}'
          release_name: 'YouTube Video Download ${{ github.run_id }}'
          draft: false
          prerelease: false

      - name: Upload video to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: './downloaded_video.mp4'
          asset_name: 'downloaded_video.mp4'
          asset_content_type: 'video/mp4'
